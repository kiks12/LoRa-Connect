generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bracelets {
  braceletId String       @id
  createdAt  DateTime     @default(now())
  name       String
  ownerId    Int?         @unique
  rescuerId  Int?         @unique
  type       BraceletType @default(USER)
  rescuer    Rescuers?    @relation(fields: [rescuerId], references: [rescuerId])
  user       Users?       @relation(fields: [ownerId], references: [userId])
  latitude   Float?
  longitude  Float?
  urgency    Float?       @default(0.2)
  sos        Boolean      @default(false)
}

model Rescuers {
  rescuerId   Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  name        String
  bracelet    Bracelets?
  Operations  Operations[]
  Teams       Teams?       @relation(fields: [teamsTeamId], references: [teamId])
  teamsTeamId Int?
}

model Teams {
  teamId    Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  name      String?
  rescuers  Rescuers[]
}

model EvacuationCenters {
  evacuationId Int          @id @default(autoincrement())
  name         String
  latitude     Float
  longitude    Float
  capacity     Int
  createdAt    DateTime     @default(now())
  Operations   Operations[]
}

model Operations {
  missionId                     Int                  @id @default(autoincrement())
  createAt                      DateTime             @default(now())
  dateTime                      DateTime             @default(now())
  rescuersRescuerId             Int
  usersUserId                   Int
  status                        OperationStatus
  urgency                       RescueUrgency
  numberOfRescuee               Int
  evacuationCentersEvacuationId Int
  evacuationCenter              EvacuationCenters    @relation(fields: [evacuationCentersEvacuationId], references: [evacuationId])
  rescuer                       Rescuers             @relation(fields: [rescuersRescuerId], references: [rescuerId])
  user                          Users                @relation(fields: [usersUserId], references: [userId])
  VictimStatusReport            VictimStatusReport[]

  @@index([evacuationCentersEvacuationId], map: "Operations_evacuationCentersEvacuationId_fkey")
  @@index([usersUserId], map: "Operations_ownersOwnerId_fkey")
  @@index([rescuersRescuerId], map: "Operations_rescuersRescuerId_fkey")
}

model VictimStatusReport {
  victimStatusReportId Int          @id @default(autoincrement())
  name                 String
  age                  Int
  status               VictimStatus
  notes                String
  operationsMissionId  Int
  operation            Operations   @relation(fields: [operationsMissionId], references: [missionId], onDelete: Cascade)

  @@index([operationsMissionId], map: "VictimStatusReport_operationsMissionId_fkey")
}

model Obstacle {
  obstacleId Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  dateTime   DateTime @default(now())
  type       String
  name       String
  longitude  Float
  latitude   Float
}

model Users {
  userId                  Int          @id @default(autoincrement())
  createdAt               DateTime     @default(now())
  name                    String
  numberOfMembersInFamily Int
  address                 String?
  bracelet                Bracelets?
  Operations              Operations[]
}

enum BraceletType {
  USER
  RESCUER
}

enum OperationStatus {
  ASSIGNED
  PENDING
  COMPLETE
  CANCELED
  FAILED
}

enum RescueUrgency {
  LOW
  MODERATE
  SEVERE
}

enum VictimStatus {
  OKAY
  MINOR_INJURY
  MODERATE_INJURY
  SEVERE_INJURY
  DECEASED
}
