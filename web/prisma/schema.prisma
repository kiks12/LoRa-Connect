generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
}

model Accounts {
  accountId String      @id @unique @default(uuid())
  email     String      @unique
  password  String
  type      AccountType @default(ADMIN)
}

model Bracelets {
  braceletId String       @id @unique
  macAddress String       @unique
  createdAt  DateTime     @default(now())
  name       String       @unique
  ownerId    Int?         @unique
  rescuerId  Int?         @unique
  type       BraceletType @default(USER)
  rescuer    Rescuers?    @relation(fields: [rescuerId], references: [rescuerId])
  user       Users?       @relation(fields: [ownerId], references: [userId])
  latitude   Float?
  longitude  Float?
  urgency    Float?       @default(0.2)
  sos        Boolean      @default(false)
}

model Rescuers {
  rescuerId   Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  givenName   String
  middleName  String
  lastName    String
  suffix      String
  bracelet    Bracelets?
  Teams       Teams?     @relation(fields: [teamsTeamId], references: [teamId])
  teamsTeamId Int?
}

model Teams {
  teamId    Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  name      String?      @unique
  rescuers  Rescuers[]
  operation Operations[]
}

model EvacuationCenters {
  evacuationId Int      @id @default(autoincrement())
  name         String   @unique
  latitude     Float
  longitude    Float
  capacity     Int
  createdAt    DateTime @default(now())
}

model Operations {
  missionId        String    @unique()
  createAt         DateTime  @default(now())
  dateTime         DateTime  @default(now())
  distance         Float
  eta              Float
  timeOfArrival    DateTime?
  timeOfCompletion DateTime?

  usersUserId     Int
  user            Users           @relation(fields: [usersUserId], references: [userId])
  userBraceletId  String
  status          OperationStatus
  urgency         RescueUrgency
  numberOfRescuee Int

  teamsTeamId    Int?
  Teams          Teams? @relation(fields: [teamsTeamId], references: [teamId])
  teamBraceletId String

  evacuationCenter   String?
  VictimStatusReport VictimStatusReport[]

  @@index([usersUserId], map: "Operations_ownersOwnerId_fkey")
}

model VictimStatusReport {
  victimStatusReportId Int          @id @default(autoincrement())
  name                 String
  age                  Int
  status               VictimStatus
  notes                String
  operationsMissionId  String
  operation            Operations   @relation(fields: [operationsMissionId], references: [missionId], onDelete: Cascade)

  @@index([operationsMissionId], map: "VictimStatusReport_operationsMissionId_fkey")
}

model Obstacle {
  obstacleId Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  dateTime   DateTime @default(now())
  type       String
  name       String   @unique
  longitude  Float
  latitude   Float
}

model Users {
  userId                  Int          @id @unique @default(autoincrement())
  createdAt               DateTime     @default(now())
  givenName               String
  middleName              String?
  lastName                String
  suffix                  String?
  numberOfMembersInFamily Int
  address                 String?
  bracelet                Bracelets?
  Operations              Operations[]
}

enum BraceletType {
  USER
  RESCUER
}

enum OperationStatus {
  ASSIGNED
  PENDING
  COMPLETE
  CANCELED
  FAILED
}

enum RescueUrgency {
  LOW
  MODERATE
  SEVERE
}

enum VictimStatus {
  OKAY
  MINOR_INJURY
  MODERATE_INJURY
  SEVERE_INJURY
  DECEASED
}
